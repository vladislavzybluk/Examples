SELECT *,
       (CASE WHEN cohorts.revenue_on_activation < 10 THEN '0-10'
             WHEN cohorts.revenue_on_activation < 100 AND cohorts.revenue_on_activation >= 10 THEN '10-100'
             WHEN cohorts.revenue_on_activation < 1000 AND cohorts.revenue_on_activation >= 100 THEN '100-1.000'
             WHEN cohorts.revenue_on_activation < 10000 AND cohorts.revenue_on_activation >= 1000 THEN '1.000-10.000'
             WHEN cohorts.revenue_on_activation >=10000 THEN '10.000+'
           END) AS rev_cohort
FROM (WITH
           money AS (WITH tx AS (SELECT DISTINCT t.user_id,
                                                 FIRST_VALUE(t.type) OVER (PARTITION BY t.user_id ORDER BY t.created_at) AS tx_type,
                                                 FIRST_VALUE(t.created_at) OVER (PARTITION BY t.user_id ORDER BY t.created_at) AS first_tx,
                                                 'transaction' AS money_type
                                 FROM transactions t
                                          JOIN transaction_items ti on t.id = ti.transaction_id
                                 WHERE t.status NOT IN (-1, -5) AND ti.amount > 1), -- here we need only positive and bigger than 1
                          cx AS (SELECT distinct cx.user_id,
                                                 FIRST_VALUE(cx.status)
                                                 OVER (PARTITION BY cx.user_id ORDER BY cx.created_at) as cx_type,
                                                 FIRST_VALUE(cx.created_at)
                                                 OVER (PARTITION BY cx.user_id ORDER BY cx.created_at) as first_cx,
                                                 'credit'                                              as money_type
                                 FROM credits cx
                                          JOIN credit_items ci on cx.id = ci.credit_id
                                 WHERE ci.amount > 1
                          )
                     SELECT u.id     AS user_id,
                            (CASE WHEN tx.first_tx < COALESCE(cx.first_cx, now()) THEN tx.first_tx ELSE cx.first_cx END) AS first_tx_cx_date,
                            (CASE WHEN tx.first_tx < COALESCE(cx.first_cx, now()) THEN tx.tx_type ELSE cx.cx_type END) AS first_type,
                            (CASE WHEN tx.first_tx < COALESCE(cx.first_cx, now()) THEN tx.money_type ELSE cx.money_type END) AS money_type
                     FROM users u
                              LEFT JOIN tx ON tx.user_id = u.id
                              LEFT JOIN cx ON cx.user_id = u.id
                     WHERE u.created_at BETWEEN '2022-01-01' AND NOW()::date
),
           first_req AS (SELECT distinct temp_req.user_id,
                                         FIRST_VALUE(temp_req.created_at)
                                         OVER (PARTITION BY temp_req.user_id ORDER BY temp_req.created_at) as first_request,
                                         FIRST_VALUE(temp_req.title)
                                         OVER (PARTITION BY temp_req.user_id ORDER BY temp_req.created_at) as first_method

                         FROM (SELECT u.id AS user_id,
                                      upm.title,
                                      pr.created_at
                               FROM payment_requests pr
                                        JOIN user_payment_methods upm ON pr.user_payment_method_id = upm.id
                                        JOIN payment_methods pm ON upm.payment_method_id = pm.id
                                        JOIN payment_request_status_logs prsl ON pr.id = prsl.payment_request_id
                                        JOIN users u ON upm.user_id = u.id
                               WHERE (prsl.status = 10 AND prsl.is_active = true)
                                 AND u.id NOT IN
                                     (12401, 2860, 12922, 89224, 85222, 12292, 29522, 89932, 29535, 96231, 22217,
                                      96479) AND (u.created_at BETWEEN '2022-05-01' and NOW()::date)
                              ) temp_req),
           rev AS (SELECT uc2.user_id,
                          date_trunc('month', vcrr.date) AS month_,
                          ROUND((vcrr.channel_app + vcrr.channel_aug + vcrr.channel_pug + vcrr.channel_ppp +
                                 vcrr.channel_oth + vcrr.channel_sht + vcrr.channel_sct + vcrr.channel_spt -
                                 COALESCE(vcrr.channel_usa_tax, 0)), 2) AS channel_revenue,
                          FIRST_VALUE(cr.created_at) OVER(PARTITION BY uc2.user_id ORDER BY vcrr.date) AS cr_date
                   FROM view_connect_request_monthly_revenues vcrr
                            JOIN connect_requests cr ON vcrr.connect_request_id = cr.id
                            JOIN channels c2 ON cr.channel_id = c2.id
                            JOIN user_channel uc2 ON c2.id = uc2.channel_id
                            JOIN connect_request_status_logs crsl ON cr.id = crsl.connect_request_id AND crsl.status = 4
                   WHERE uc2.is_main AND (cr.created_at BETWEEN '2022-05-01' AND NOW()::date)
           )
SELECT distinct u.id                                                         as user_id,
                      concat('https://mcpay.io/ru/adm/administrator/users/', u.id) as link,
                      m.title                                                      as mcn_title,
                      c3.name as country,
                      l.source,

                      u.created_at::date                                           as reg_date,
                      rev.cr_date::date                                             as connect_request_date,
                      money.first_tx_cx_date::date,

                      (CASE WHEN rev.cr_date >= u.created_at THEN (rev.cr_date::date - u.created_at::date)
                            WHEN rev.cr_date < u.created_at THEN (u.created_at::date - rev.cr_date::date)
                       END) as reg_and_con__,
                      (CASE WHEN rev.cr_date >= u.created_at THEN 'first is registration'
                            WHEN rev.cr_date < u.created_at THEN ' first is connect request'
                       END) as reg_and_con_status,
                      (money.first_tx_cx_date::date - rev.cr_date::date) as conect_to_tx__,
                      (money.first_tx_cx_date::date - u.created_at::date) as reg_to_tx__,
                      (first_req.first_request::date - money.first_tx_cx_date::date) as tx_to_wd__,
                      money.first_type,
                      money.money_type,
                      (CASE WHEN (u.id = rev.user_id and rev.month_::date = date_trunc('month',money.first_tx_cx_date)::date) THEN rev.channel_revenue END) as revenue_on_activation
      FROM users u
               LEFT JOIN money on money.user_id = u.id
               LEFT JOIN mcns m on u.mcn_id = m.id
               LEFT JOIN first_req on first_req.user_id = u.id
               JOIN rev on u.id = rev.user_id
               LEFT JOIN countries c3 on u.country_id = c3.id
               LEFT JOIN leads l on u.id = l.user_id
      WHERE u.created_at BETWEEN '2022-05-01' and NOW()::date) cohorts
where cohorts.revenue_on_activation IS NOT NULL
